x-base: &base
  restart: always

x-networks: &networks
  networks:
    - default

volumes:
  devspace_data:
    driver: local
    driver_opts:
      type: none
      device: ./data
      o: bind

x-volumes: &volumes
  volumes:
    - /etc/localtime:/etc/localtime:ro
    - /etc/hosts:/etc/hosts
    - devspace_data:/app/data

services:

  code-server:
    <<: [*base, *networks]
    build:
      context: .
      dockerfile: docker/codeserver/dockerfile
      args:
        BASE_IMAGE: ${CODESERVER_IMAGE}
    image: ${IMAGE_REGISTRY_NAME}/${CODESERVER_IMAGE_NAME}:${VERSION}
    container_name: ${CODESERVER_CONTAINER_NAME}_${VERSION}
    profiles:
      - middleware
    ports:
      - "${CODESERVER_EXPOSE_PORT}:8500"
    volumes:
      - ${DATA_DIR}/devspaces:/app/data
      - ${DATA_DIR}/codeserver:/config
      - ${DOCKER_BIN_PATH}:/usr/bin/docker
      - ${DOCKER_SOCK_PATH}:/var/run/docker.sock
    environment:
      - CERT_PATH=
      - CERT_KEY_PATH=
      - SELF_SIGNED_CERT=yes
      - BIND_CLOUD_NAME=
      - PASSWORD=${PASSWORD}
      - ENABLE_STARTUP_SCRIPTS=yes
      - UMASK=000
      - PUID=0
      - PGID=0

  sandbox:
    <<: [*base, *volumes, *networks]
    build:
      context: .
      dockerfile: docker/sandbox/dockerfile
      args:
        BASE_IMAGE: ${SANDBOX_GO_IMAGE}
        RUNNER_IMAGE: ${SANDBOX_RUNNER_IMAGE}
    image: ${IMAGE_REGISTRY_NAME}/${SANDBOX_IMAGE_NAME}:${VERSION}
    container_name: ${SANDBOX_CONTAINER_NAME}_${VERSION}
    profiles:
      - middleware
    environment:
      - API_KEY=${PASSWORD:-123456}
      - GIN_MODE=${SANDBOX_GIN_MODE:-release}
      - WORKER_TIMEOUT=${SANDBOX_WORKER_TIMEOUT:-15}
      - ENABLE_NETWORK=${SANDBOX_ENABLE_NETWORK:-true}
      - HTTP_PROXY=${SANDBOX_HTTP_PROXY:-http://ssrf_proxy:3128}
      - HTTPS_PROXY=${SANDBOX_HTTPS_PROXY:-http://ssrf_proxy:3128}
      - SANDBOX_PORT=${SANDBOX_PORT:-8194}
    ports:
      - "${SANDBOX_EXPOSE_PORT}:8194"

  ssrf_proxy:
    <<: [*base, *networks]
    build:
      context: .
      dockerfile: docker/ssrf_proxy/dockerfile
      args:
        BASE_IMAGE: ${SSRF_PROXY_BASE_IMAGE_NAME}
    image: ${IMAGE_REGISTRY_NAME}/${SSRF_PROXY_IMAGE_NAME}:${VERSION}
    container_name: ${SSRF_PROXY_CONTAINER_NAME}_${VERSION}
    profiles:
      - middleware
    restart: always
    environment:
      # pls clearly modify the squid env vars to fit your network environment.
      HTTP_PORT: ${SSRF_HTTP_PORT:-3128}
      COREDUMP_DIR: ${SSRF_COREDUMP_DIR:-/var/spool/squid}
      REVERSE_PROXY_PORT: ${SSRF_REVERSE_PROXY_PORT:-8194}
      SANDBOX_HOST: ${SSRF_SANDBOX_HOST:-sandbox}
      SANDBOX_PORT: ${EXPOSE_SANDBOX_PORT:-8194}
    ports:
      - "${EXPOSE_SSRF_HTTP_PORT:-3128}:${SSRF_HTTP_PORT:-3128}"

  jupyter:
    <<: [*base, *volumes, *networks]
    build:
      context: .
      dockerfile: docker/jupyter/dockerfile
      args:
        BASE_IMAGE: ${JUPYTER_PYTHON_IMAGE}
        JUPYTER_TOKEN: ${PASSWORD}
    image: ${IMAGE_REGISTRY_NAME}/${JUPYTER_IMAGE_NAME}:${VERSION}
    container_name: ${JUPYTER_CONTAINER_NAME}_${VERSION}
    profiles:
      - middleware
    environment:
      MODE: service
    ports:
      - "${JUPYTER_EXPOSE_PORT}:80"
    depends_on:
      - sandbox

  # The redis cache.
  redis:
    image: ${REDIS_IMAGE}
    container_name: ${REDIS_CONTAINER_NAME}_${VERSION}
    profiles:
      - middleware
    restart: always
    volumes:
      - /etc/hosts:/etc/hosts 
      # Mount the redis data directory to the container.
      - ${DATA_DIR}/redis:/data
    # Set the redis password when startup redis server.
    command: redis-server --requirepass ${PASSWORD}
    ports:
      - "${REDIS_EXPOSE_PORT:-6379}:6379"

  pgvector:
    image: ${PGVECTOR_IMAGE}
    container_name: ${PGVECTOR_CONTAINER_NAME}_${VERSION}
    profiles:
      - middleware
    restart: always
    ports:
      - "${PGVECTOR_EXPOSE_PORT:-5432}:5432"
    volumes:
      - /etc/hosts:/etc/hosts 
      - /etc/localtime:/etc/localtime
      - ${DATA_DIR}/pgvector:/var/lib/postgresql/data
    environment:
      PGUSER: ${PGVECTOR_PGUSER:-postgres}
      POSTGRES_PASSWORD: ${PGVECTOR_POSTGRES_PASSWORD:-$PASSWORD}
      POSTGRES_DB: ${PGVECTOR_POSTGRES_DB:-postgres}
      PGDATA: ${PGDATA:-/var/lib/postgresql/data/pgdata}
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 1s
      timeout: 3s
      retries: 30      
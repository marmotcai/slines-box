# 第一阶段：构建环境
ARG BASE_IMAGE=golang:1.20-bookworm
ARG RUNNER_IMAGE=python:3.10.14-slim-bookworm

FROM ${BASE_IMAGE} AS builder

# 设置工作目录
WORKDIR /app

# 替换为清华源（兼容旧版 Docker 的写法）
RUN rm -f /etc/apt/sources.list.d/debian.sources && \
    echo "Types: deb" > /etc/apt/sources.list.d/debian.sources && \
    echo "URIs: https://mirrors.tuna.tsinghua.edu.cn/debian" >> /etc/apt/sources.list.d/debian.sources && \
    echo "Suites: bookworm bookworm-updates bookworm-backports" >> /etc/apt/sources.list.d/debian.sources && \
    echo "Components: main contrib non-free non-free-firmware" >> /etc/apt/sources.list.d/debian.sources && \
    echo "Signed-By: /usr/share/keyrings/debian-archive-keyring.gpg" >> /etc/apt/sources.list.d/debian.sources && \
    echo "" >> /etc/apt/sources.list.d/debian.sources && \
    echo "Types: deb" >> /etc/apt/sources.list.d/debian.sources && \
    echo "URIs: https://mirrors.tuna.tsinghua.edu.cn/debian-security" >> /etc/apt/sources.list.d/debian.sources && \
    echo "Suites: bookworm-security" >> /etc/apt/sources.list.d/debian.sources && \
    echo "Components: main contrib non-free non-free-firmware" >> /etc/apt/sources.list.d/debian.sources && \
    echo "Signed-By: /usr/share/keyrings/debian-archive-keyring.gpg" >> /etc/apt/sources.list.d/debian.sources

# 复制源代码到容器中
COPY . .
RUN bash install.sh

RUN ARCH=$(uname -m) && \
    if [ "$ARCH" = "x86_64" ]; then \
        echo "Running on x86_64" && \
        bash build/build_amd64.sh; \
    elif [ "$ARCH" = "aarch64" ]; then \
        echo "Running on ARM64" && \
        bash build/build_arm64.sh; \
    else \
        echo "Unknown architecture"; \
        # 可以添加一些默认命令或者退出
    fi

# 第二阶段：运行环境
FROM ${RUNNER_IMAGE} AS runner

# 替换为清华源（兼容旧版 Docker 的写法）
RUN rm -f /etc/apt/sources.list.d/debian.sources && \
    echo "Types: deb" > /etc/apt/sources.list.d/debian.sources && \
    echo "URIs: https://mirrors.tuna.tsinghua.edu.cn/debian" >> /etc/apt/sources.list.d/debian.sources && \
    echo "Suites: bookworm bookworm-updates bookworm-backports" >> /etc/apt/sources.list.d/debian.sources && \
    echo "Components: main contrib non-free non-free-firmware" >> /etc/apt/sources.list.d/debian.sources && \
    echo "Signed-By: /usr/share/keyrings/debian-archive-keyring.gpg" >> /etc/apt/sources.list.d/debian.sources && \
    echo "" >> /etc/apt/sources.list.d/debian.sources && \
    echo "Types: deb" >> /etc/apt/sources.list.d/debian.sources && \
    echo "URIs: https://mirrors.tuna.tsinghua.edu.cn/debian-security" >> /etc/apt/sources.list.d/debian.sources && \
    echo "Suites: bookworm-security" >> /etc/apt/sources.list.d/debian.sources && \
    echo "Components: main contrib non-free non-free-firmware" >> /etc/apt/sources.list.d/debian.sources && \
    echo "Signed-By: /usr/share/keyrings/debian-archive-keyring.gpg" >> /etc/apt/sources.list.d/debian.sources

RUN apt-get clean && apt-get update && apt-get install -y wget xz-utils binutils pkg-config libseccomp-dev build-essential libgl1-mesa-glx libglib2.0-0
RUN rm -rf /var/lib/apt/lists/* \
    && python -m pip install -i https://pypi.tuna.tsinghua.edu.cn/simple jinja2 requests httpx PySocks httpx[socks] \
    && wget -O /opt/node-v20.11.1-linux-x64.tar.xz https://npmmirror.com/mirrors/node/v20.11.1/node-v20.11.1-linux-x64.tar.xz \
    && tar -xvf /opt/node-v20.11.1-linux-x64.tar.xz -C /opt \
    && ln -s /opt/node-v20.11.1-linux-x64/bin/node /usr/local/bin/node \
    && rm -f /opt/node-v20.11.1-linux-x64.tar.xz

# 在新的阶段中设置工作目录
WORKDIR /app/sandbox
COPY conf/config.yaml ./conf/config.yaml

# 从构建器阶段复制编译好的应用程序到当前阶段
COPY --from=builder /app/main ./runner
RUN chmod +x ./runner

# 运行应用程序
CMD ["./runner"]
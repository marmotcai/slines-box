x-base: &base
  restart: unless-stopped

x-networks: &networks
  networks:
    - default

volumes:
  devspace_data:
    driver: local
    driver_opts:
      type: none
      device: ./data
      o: bind

x-volumes: &volumes
  volumes:
    - /etc/localtime:/etc/localtime:ro
    - /etc/hosts:/etc/hosts
    - devspace_data:/app/data

services:

  code-server:
    <<: [*base, *volumes, *networks]
    build:
      context: .
      dockerfile: docker/codeserver/dockerfile
      args:
        BASE_IMAGE: ${CODESERVER_IMAGE}
    image: ${IMAGE_REGISTRY_NAME}/${CODESERVER_IMAGE_NAME}:${VERSION}
    container_name: ${CODESERVER_CONTAINER_NAME}_${VERSION}
    ports:
      - "${CODESERVER_EXPOSE_PORT}:8500"
    volumes:
      - /mnt/user/appdata/codeserver:/config
    environment:
      - CERT_PATH=
      - CERT_KEY_PATH=
      - SELF_SIGNED_CERT=yes
      - BIND_CLOUD_NAME=
      - PASSWORD=${PASSWORD}
      - ENABLE_STARTUP_SCRIPTS=yes
      - UMASK=000
      - PUID=0
      - PGID=0

  sandbox:
    <<: [*base, *volumes, *networks]
    build:
      context: .
      dockerfile: docker/sandbox/dockerfile
      args:
        BASE_IMAGE: ${SANDBOX_GO_IMAGE}
        RUNNER_IMAGE: ${SANDBOX_RUNNER_IMAGE}
    image: ${IMAGE_REGISTRY_NAME}/${SANDBOX_IMAGE_NAME}:${VERSION}
    container_name: ${SANDBOX_CONTAINER_NAME}_${VERSION}
    environment:
      - API_KEY=${PASSWORD:-123456}
      - GIN_MODE=${SANDBOX_GIN_MODE:-release}
      - WORKER_TIMEOUT=${SANDBOX_WORKER_TIMEOUT:-15}
      - ENABLE_NETWORK=${SANDBOX_ENABLE_NETWORK:-true}
      - HTTP_PROXY=${SANDBOX_HTTP_PROXY:-http://ssrf_proxy:3128}
      - HTTPS_PROXY=${SANDBOX_HTTPS_PROXY:-http://ssrf_proxy:3128}
      - SANDBOX_PORT=${SANDBOX_PORT:-8194}
    ports:
      - "${SANDBOX_EXPOSE_PORT}:8194"

  jupyter:
    <<: [*base, *volumes, *networks]
    build:
      context: .
      dockerfile: docker/jupyter/dockerfile
      args:
        BASE_IMAGE: ${JUPYTER_PYTHON_IMAGE}
        JUPYTER_TOKEN: ${PASSWORD}
    image: ${IMAGE_REGISTRY_NAME}/${JUPYTER_IMAGE_NAME}:${VERSION}
    container_name: ${JUPYTER_CONTAINER_NAME}_${VERSION}
    restart: unless-stopped
    environment:
      MODE: service
    ports:
      - "${JUPYTER_EXPOSE_PORT}:80"
    depends_on:
      - sandbox

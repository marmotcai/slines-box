x-base: &base
  restart: always

x-volumes: &volumes
  volumes:
    - /etc/localtime:/etc/localtime:ro
    - /etc/hosts:/etc/hosts
    - ./data:/app/data

networks:
  ssrf_proxy_network:
    driver: bridge
    internal: true

x-networks: &networks
  networks:
    - default

services:
  ################################################################################################

  # The DifySandbox
  sandbox:
    build:
      context: .
      dockerfile: ./sandbox/dockerfile
      args:
        BASE_IMAGE: ${SANDBOX_GO_IMAGE}
        RUNNER_IMAGE: ${SANDBOX_RUNNER_IMAGE}
    image: ${IMAGE_REGISTRY_NAME}/${SANDBOX_IMAGE_NAME}:${VERSION}
    container_name: ${SANDBOX_CONTAINER_NAME}_${VERSION}
    profiles:
      - all
      - sandbox
    environment:
      # The DifySandbox configurations
      # Make sure you are changing this key for your deployment with a strong key.
      # You can generate a strong key using `openssl rand -base64 42`.
      API_KEY: ${PASSWORD:-dify-sandbox}
      GIN_MODE: ${SANDBOX_GIN_MODE:-release}
      WORKER_TIMEOUT: ${SANDBOX_WORKER_TIMEOUT:-15}
      ENABLE_NETWORK: ${SANDBOX_ENABLE_NETWORK:-true}
      HTTP_PROXY: ${SANDBOX_HTTP_PROXY:-http://ssrf_proxy:3128}
      HTTPS_PROXY: ${SANDBOX_HTTPS_PROXY:-http://ssrf_proxy:3128}
      SANDBOX_PORT: ${SANDBOX_PORT:-8194}
    volumes:
      - ./data/sandbox/dependencies:/dependencies
      - ./data/sandbox/conf:/conf
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://localhost:8194/health' ]
    networks:
      - ssrf_proxy_network
      - default

  # ssrf_proxy server
  # for more information, please refer to
  # https://docs.dify.ai/learn-more/faq/install-faq#id-18.-why-is-ssrf_proxy-needed
  ssrf_proxy:
    build:
      context: .
      dockerfile: ./ssrf_proxy/dockerfile
      args:
        BASE_IMAGE: ${SSRF_PROXY_BASE_IMAGE_NAME}
    image: ${IMAGE_REGISTRY_NAME}/${SSRF_PROXY_IMAGE_NAME}:${VERSION}
    container_name: ${SSRF_PROXY_CONTAINER_NAME}_${VERSION}
    profiles:
      - all
      - sandbox
    restart: always
    environment:
      # pls clearly modify the squid env vars to fit your network environment.
      HTTP_PORT: ${SSRF_HTTP_PORT:-3128}
      COREDUMP_DIR: ${SSRF_COREDUMP_DIR:-/var/spool/squid}
      REVERSE_PROXY_PORT: ${SSRF_REVERSE_PROXY_PORT:-8194}
      SANDBOX_HOST: ${SSRF_SANDBOX_HOST:-sandbox}
      SANDBOX_PORT: ${SANDBOX_PORT:-8194}
    ports:
      - "${SSRF_HTTP_EXPOSE_PORT:-3128}:${SSRF_HTTP_PORT:-3128}"
      - "${SANDBOX_EXPOSE_PORT:-8194}:${SANDBOX_PORT:-8194}"
    networks:
      - ssrf_proxy_network
      - default

  ################################################################################################

  # The redis cache.
  redis:
    image: ${REDIS_IMAGE}
    container_name: ${REDIS_CONTAINER_NAME}_${VERSION}
    profiles:
      - all
      - storage
    restart: always
    volumes:
      - /etc/hosts:/etc/hosts 
      # Mount the redis data directory to the container.
      - ${DATA_DIR}/redis:/data
      # Set the redis password when startup redis server.
    command: redis-server --requirepass ${PASSWORD}
    ports:
      - "${REDIS_EXPOSE_PORT:-6379}:6379"

  pgvector:
    image: ${PGVECTOR_IMAGE}
    container_name: ${PGVECTOR_CONTAINER_NAME}_${VERSION}
    profiles:
      - all
      - storage
    restart: always
    ports:
      - "${EXPOSE_DB_PORT:-5432}:5432"
    volumes:
      - /etc/hosts:/etc/hosts 
      - /etc/localtime:/etc/localtime
      - ${DATA_DIR}/pgvector:/var/lib/postgresql/data
    environment:
      PGUSER: ${PGVECTOR_PGUSER:-postgres}
      POSTGRES_PASSWORD: ${PGVECTOR_POSTGRES_PASSWORD:-$PASSWORD}
      POSTGRES_DB: ${PGVECTOR_POSTGRES_DB:-postgres}
      PGDATA: ${PGDATA:-/var/lib/postgresql/data/pgdata}
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 1s
      timeout: 3s
      retries: 30

  minio:
    image: ghcr.io/imagegenius/minio
    container_name: ${MINIO_CONTAINER_NAME}
    profiles:
      - all
      - storage
    restart: always
    environment:
      TZ: "Asia/Shanghai"
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${PASSWORD:-minioadmin}
      PUID: 99
      PGID: 100
      UMASK: 022
    volumes:
      - ${DATA_DIR}/minio:/config
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live' ]
      interval: 30s
      timeout: 20s
      retries: 3
    ports:
      - "${MINIO_EXPOSE_WEB_PORT:-9000}:9000"
      - "${MINIO_EXPOSE_CONSOLE_PORT:-9001}:9001"

  # The Weaviate vector store.
  weaviate:
    image: ${WEAVIATE_IMAGE}
    container_name: ${WEAVIATE_CONTAINER_NAME}_${VERSION}
    profiles:
      - all
      - storage
    restart: always
    volumes:
      # Mount the Weaviate data directory to the container.
      - ${DATA_DIR}/weaviate:/var/lib/weaviate
    environment:
      # The Weaviate configurations
      # You can refer to the [Weaviate](https://weaviate.io/developers/weaviate/config-refs/env-vars) documentation for more information.
      PERSISTENCE_DATA_PATH: ${WEAVIATE_PERSISTENCE_DATA_PATH:-/var/lib/weaviate}
      QUERY_DEFAULTS_LIMIT: ${WEAVIATE_QUERY_DEFAULTS_LIMIT:-25}
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: ${WEAVIATE_AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED:-false}
      DEFAULT_VECTORIZER_MODULE: ${WEAVIATE_DEFAULT_VECTORIZER_MODULE:-none}
      CLUSTER_HOSTNAME: ${WEAVIATE_CLUSTER_HOSTNAME:-node1}
      AUTHENTICATION_APIKEY_ENABLED: ${WEAVIATE_AUTHENTICATION_APIKEY_ENABLED:-true}
      AUTHENTICATION_APIKEY_ALLOWED_KEYS: ${WEAVIATE_AUTHENTICATION_APIKEY_ALLOWED_KEYS:-WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih}
      AUTHENTICATION_APIKEY_USERS: ${WEAVIATE_AUTHENTICATION_APIKEY_USERS:-hello@dify.ai}
      AUTHORIZATION_ADMINLIST_ENABLED: ${WEAVIATE_AUTHORIZATION_ADMINLIST_ENABLED:-true}
      AUTHORIZATION_ADMINLIST_USERS: ${WEAVIATE_AUTHORIZATION_ADMINLIST_USERS:-hello@dify.ai}
    ports:
      - "${WEAVIATE_EXPOSE_PORT:-8080}:8080"

  ################################################################################################

  code-server:
    <<: [*base, *networks]
    build:
      context: .
      dockerfile: codeserver/dockerfile
      args:
        BASE_IMAGE: ${CODESERVER_IMAGE}
    image: ${IMAGE_REGISTRY_NAME}/${CODESERVER_IMAGE_NAME}:${VERSION}
    container_name: ${CODESERVER_CONTAINER_NAME}_${VERSION}
    profiles:
      - all
      - dev
    ports:
      - "${CODESERVER_EXPOSE_PORT}:8500"
    volumes:
      - ${DATA_DIR}/devspaces:/app/data
      - ${DATA_DIR}/codeserver:/config
      - ${DOCKER_BIN_PATH}:/usr/bin/docker
      - ${DOCKER_SOCK_PATH}:/var/run/docker.sock
    environment:
      - CERT_PATH=
      - CERT_KEY_PATH=
      - SELF_SIGNED_CERT=yes
      - BIND_CLOUD_NAME=
      - PASSWORD=${PASSWORD}
      - ENABLE_STARTUP_SCRIPTS=yes
      - UMASK=000
      - PUID=0
      - PGID=0

  jupyter:
    <<: [*base, *volumes]
    build:
      context: .
      dockerfile: jupyter/dockerfile
      args:
        BASE_IMAGE: ${JUPYTER_PYTHON_IMAGE}
        JUPYTER_TOKEN: ${PASSWORD}
    image: ${IMAGE_REGISTRY_NAME}/${JUPYTER_IMAGE_NAME}:${VERSION}
    container_name: ${JUPYTER_CONTAINER_NAME}_${VERSION}
    profiles:
      - all
      - dev
    environment:
      MODE: service
    ports:
      - "${JUPYTER_EXPOSE_PORT}:80"
    depends_on:
      - sandbox

  ################################################################################################

  plugin_daemon:
    image: ${PLUGIN_DAEMON_IMAGE}
    restart: always
    profiles:
      - dify
    environment:
      # Use the shared environment variables.
      DB_HOST: ${DB_HOST:-db}
      DB_PORT: ${DB_PORT:-5432}
      DB_USERNAME: ${DB_USER:-postgres}
      DB_PASSWORD: ${PASSWORD:-difyai123456}
      DB_DATABASE: ${DB_PLUGIN_DATABASE:-dify_plugin}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-difyai123456}
      SERVER_PORT: ${PLUGIN_DAEMON_PORT:-5002}
      SERVER_KEY: ${PLUGIN_DAEMON_KEY:-lYkiYYT6owG+71oLerGzA7GXCgOT++6ovaezWAjpCjf+Sjc3ZtU+qUEi}
      MAX_PLUGIN_PACKAGE_SIZE: ${PLUGIN_MAX_PACKAGE_SIZE:-52428800}
      PPROF_ENABLED: ${PLUGIN_PPROF_ENABLED:-false}
      DIFY_INNER_API_URL: ${PLUGIN_DIFY_INNER_API_URL:-http://host.docker.internal:5001}
      DIFY_INNER_API_KEY: ${PLUGIN_DIFY_INNER_API_KEY:-QaHbTe77CtuXmsfyhR7+vRjI/+XbV1AaFy691iy+kGDv2Jvy0/eAh8Y1}
      PLUGIN_REMOTE_INSTALLING_HOST: ${PLUGIN_DEBUGGING_HOST:-0.0.0.0}
      PLUGIN_REMOTE_INSTALLING_PORT: ${PLUGIN_DEBUGGING_PORT:-5003}
      PLUGIN_WORKING_PATH: ${PLUGIN_WORKING_PATH:-/app/storage/cwd}
      FORCE_VERIFYING_SIGNATURE: ${FORCE_VERIFYING_SIGNATURE:-true}
    ports:
      - "${PLUGIN_DAEMON_EXPOSE_PORT:-5002}:${PLUGIN_DAEMON_PORT:-5002}"
      - "${PLUGIN_DEBUGGING_EXPOSE_PORT:-5003}:${PLUGIN_DEBUGGING_PORT:-5003}"
    volumes:
      - ${DATA_DIR}/plugin_daemon:/app/storage